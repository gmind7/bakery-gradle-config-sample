description = "Bakery"

defaultTasks 'build'

ext {
	gradleScriptDir = "${rootProject.projectDir}/gradle"
}

buildscript {
	repositories {
	    mavenLocal()
	    jcenter()
		maven { url "http://repo.spring.io/plugins-release" }
		maven { url "http://repo.spring.io/plugins-snapshot" }
	}
	dependencies {
		classpath "org.gradle.api.plugins:gradle-tomcat-plugin:$gradleTomcatPluginVersion"
		classpath "org.gradle.api.plugins:gradle-cargo-plugin:$gradleCargoPluginVersion"
		classpath "org.springframework.build.gradle:bundlor-plugin:$gradleSpringBundlorPluginVersion"
		classpath "org.springframework.build.gradle:propdeps-plugin:$gradleSpringPropdepsPluginVersion"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
	}
}

task wrapper(type: Wrapper) {
	description = "Generates gradlew[.bat] scripts"
	gradleVersion = "$gradleVersion"
  
	doLast() {
	  def gradleOpts = "-XX:MaxPermSize=1024m -Xmx1024m"
	  def gradleBatOpts = "$gradleOpts -XX:MaxHeapSize=256m"
	  File wrapperFile = file("gradlew")
	  wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=",
												  "GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
	  File wrapperBatFile = file("gradlew.bat")
	  wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=",
														"set GRADLE_OPTS=$gradleBatOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")
	}
}

configure(allprojects) {
	
	apply plugin: "java"
	apply plugin: "eclipse-wtp"
	apply plugin: 'propdeps'
	apply plugin: 'propdeps-maven'
	apply plugin: 'propdeps-idea'
	apply plugin: 'propdeps-eclipse'
	
	apply from: "${gradleScriptDir}/maven.gradle"
	apply from: "${gradleScriptDir}/ide.gradle"
	
	project.sourceCompatibility = 1.7
	project.targetCompatibility = 1.7
	
	[compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"
  
	sourceSets.test.resources.srcDirs = ["src/test/java", "src/test/resources"]
  
	configurations.all {
		exclude group: "commons-logging"
		exclude module: "slf4j-log4j12"
		exclude module: "hibernate-jpa-2.0-api"
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if ((details.requested.group == 'org.springframework') && (details.requested.name != 'spring-test-mvc') ) {
			  details.useVersion springVersion
			} 
			if (details.requested.group == 'org.springframework.security') {
			  details.useVersion springSecurityVersion
			} 
			if (details.requested.group == 'org.slf4j') {
			  details.useVersion slf4jVersion
			}
		} 
		resolutionStrategy.failOnVersionConflict()
		// don't cache changing modules at all
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
		// cache dynamic versions for 10 minutes
		resolutionStrategy.cacheDynamicVersionsFor 10*60, 'seconds'
		resolutionStrategy.forcedModules = ["org.jboss.logging:jboss-logging:$jbossLoggingVersion",
											"xml-apis:xml-apis:$xmlApisVersion",
											"org.hamcrest:hamcrest-core:$hamcrestVersion",
											"org.javassist:javassist:$javassistVersion",
											"org.objenesis:objenesis:$objenesisVersion",
											"org.aspectj:aspectjrt:$aspectjVersion",
											"org.aspectj:aspectjweaver:$aspectjVersion"]
	}
	
  	repositories {
	  mavenLocal()
	  jcenter()
	  maven { url "http://repo.spring.io/libs-release" }
	  maven { url "http://repo.spring.io/libs-milestone" }
	  maven { url "http://repo.spring.io/libs-snapshot" }
	}
	
	dependencies {
	  // Logging
	  compile "ch.qos.logback:logback-classic:$logbackVersion"
	  compile "org.slf4j:slf4j-api:$slf4jVersion"
	  runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
	  compile "org.codehaus.janino:janino:$janinoVersion"
	  
	  // Testing
	  testCompile "junit:junit:$junitVersion"
	  testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
	  testCompile "com.jayway.jsonpath:json-path:$jsonpathVersion"
	  testCompile "org.mockito:mockito-core:$mockitoVersion"
	}
	
}

configure(subprojects) { subproject ->

	group = "${group}"
	version = "${version}"
	
	subprojectname = subproject.name;
	subprojectVersion = version;
	
	apply from: "${gradleScriptDir}/archives.gradle"
	apply from: "${gradleScriptDir}/tests.gradle"
	
	task initSrc << {
		project.sourceSets*.allSource.srcDirTrees.flatten().dir.each { dir ->
			dir.mkdirs()
		}
	}
	
	/* Eclipse 관련 설정들 */
	tasks.eclipse.dependsOn cleanEclipse
	tasks.eclipse.dependsOn initSrc
	
	dependencies {	  	
	  // Spring
	  compile("org.springframework:spring-core:$springVersion") { force = true }
	  compile("org.springframework:spring-beans:$springVersion") { force = true }	
	  compile("org.springframework:spring-context:$springVersion") { force = true }
	  compile("org.springframework:spring-context-support:$springVersion") { force = true }
	  compile("org.springframework:spring-aop:$springVersion") { force = true }
	  compile("org.springframework:spring-aspects:$springVersion") { force = true }
      compile("org.springframework:spring-expression:$springVersion") { force = true }
	  compile("org.springframework:spring-tx:$springVersion") { force = true }
	  //Spring Web
	  compile("org.springframework:spring-web:$springVersion") { force = true }
	  // Spring Data
	  compile("org.springframework.data:spring-data-commons:$springDataCommonsVersion") { force = true }
	  // Spring Other
	  compile("org.springframework.retry:spring-retry:$springRetryVersion") { force = true }
	  
	  // AspectJ
	  compile "org.aspectj:aspectjrt:$aspectjVersion"
	  compile "org.aspectj:aspectjweaver:$aspectjVersion"
	  compile "aopalliance:aopalliance:$aopallianceVersion"
	  
	  // APIs
	  compile "javax.inject:javax.inject:$javaxInjectVersion"
	  
	  // Apache Commons
	  compile "org.apache.commons:commons-lang3:$apacheCommonsLang3Version"
	  compile "commons-io:commons-io:$apacheCommonsIOVersion"
	  compile "commons-fileupload:commons-fileupload:$apacheCommonsFileuploadVersion"
	  compile "commons-beanutils:commons-beanutils:$apacheCommonsBeanutilsVersion"
	  compile "commons-collections:commons-collections:$apacheCommonsCollectionsVersion"
	  compile "commons-configuration:commons-configuration:$apacheCommonsConfigurationVersion"
	  compile "commons-pool:commons-pool:$apacheCommonsPoolVersion"
	  compile "org.apache.httpcomponents:httpclient:$apacheHttpclientVersion"
	  
	  // JSR 303 with Hibernate Validator
	  compile "javax.validation:validation-api:$javaxValidationVersion"
	  compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
	  
	  // Jackson
      compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"
      compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:$jacksonVersion"
	  
	  // Etc Supporting libraries
	  runtime "cglib:cglib-nodep:$cglibVersion"
	  compile "com.google.guava:guava:$guavaVersion"
	  compile "joda-time:joda-time:$jodaVersion"
	  compile "org.jadira.usertype:usertype.core:$jadiraVersion"
	  
	  // Testing
      testCompile("org.springframework:spring-test:$springVersion") { force = true }
	  //crosstest project(':bakery-foundation-javaconfig').sourceSets.test.output
    }
}
/*

project("shared"){
	
    description = "[shared] Project Shared Files"
    
    jar { 
        exclude(['**/*.properties','**/*.xml']) 
    } 
    
    dependencies {
	  
    }
    
}

project("application"){
    
	description = "[application] --------------"
	
	apply plugin: 'application'
	
	mainClassName = "com.gmind7.bakery.boot.SpringBootRunner"
	
	dependencies {
	  
	}
	
}

project("web"){
	
	description = "[Web] Dashboard Web"
	
	apply plugin: "war"
	
}
*/
apply from: "${gradleScriptDir}/sonar.gradle"
apply from: "${gradleScriptDir}/application.gradle"
apply from: "${gradleScriptDir}/war.gradle"
